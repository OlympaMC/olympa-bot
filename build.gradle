// Olympa Bot

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    mavenLocal()

    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }

    maven {
        url = uri('https://jcenter.bintray.com')
    }
    
	maven {
      name 'm2-dv8tion'
      url 'https://m2.dv8tion.net/releases'
    }
    
}

configurations {
	all {
		resolutionStrategy.dependencySubstitution {
        	substitute module("fr.olympa:olympa-api") with project(':olympa-api')
        	substitute module("fr.olympa:olympa-core") with project(':olympa-core')
		}
	}
	/*priority {
  	  	extendsFrom compileOnly
  	  	sourceSets.main.compileClasspath = configurations.priority + sourceSets.main.compileClasspath
    }*/
}

dependencies {
    compileOnly 'fr.olympa:olympa-core:0.0.1-SNAPSHOT'
    implementation 'net.dv8tion:JDA:4.2.1_276'
    implementation 'club.minnced:discord-webhooks:0.5.7'
    implementation 'com.vdurmont:emoji-java:5.1.1'
    implementation 'org.twitter4j:twitter4j-core:4.0.7'
    implementation 'com.github.theholywaffle:teamspeak3-api:1.3.0'
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 8
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}


group = 'fr.olympa'
version = '0.0.1-SNAPSHOT'
description = 'olympa-bot'
java.sourceCompatibility = JavaVersion.VERSION_11

jar {
	archiveFileName = 'OlympaBot.jar'
	destinationDirectory = file('build')
}

shadowJar{
	archiveFileName = 'OlympaBot.jar'
	destinationDirectory = file('build')
    classifier = null
}

processResources {
	outputs.upToDateWhen { false }
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
       "plugin_version": version + "-" + getGitBranch() + '-' + getCheckedOutGitCommitHash() + "-" + getDate()
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
